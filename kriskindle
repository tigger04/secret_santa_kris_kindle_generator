#!/usr/bin/env bash

#shellcheck source=helper.sh
.≥≥ helper.sh

set -e
unset arg_generate_stdout arg_generate_file arg_input_file arg_tests

function usage {
	 cat <<eom
    Usage: $(basename "$0") [OPTION]...

    -g         generate example input
    -G         generate example input to file 
    -i <FILE>  location of input file [default: STDIN]
    -h         display help
eom

}

while getopts "Ggi:ht" optKey; do
	 case "$optKey" in
        g)
            arg_generate_stdout=true
            ;;
		  G)
			   arg_generate_file=true
			   ;;
		  i)
            arg_input_file="$OPTARG"
			   ;;
        h)
            usage && exit 0
            ;;
        t)
            arg_tests=true
            ;;
        *)
            usage && exit 41
	         ;;
	 esac
done

shift $((OPTIND - 1))
# init switch flags

declare -g run_id run

set_run_id () {
    run_id="${EPOCHSECONDS}.$RANDOM$RANDOM"
    run="run.$run_id"
    all="$run/all"
    fails="$run/fails"
}

set_run_id
exclusions="exclusions"
assignments="assignments"
candidates="candidates"
# assigned="$participants/assigned"

generate () {

    cat - <<eof
Picard =Nerys
Riker -Picard
Kirk -Spock
Spock -Kirk
Sisko -Nerys -Worf -O'Brien
Janeway -Chakotay -Kirk -Picard -Sisko
Chakotay -Janeway
T'Pol
O'Brien
Worf =Picard
LaForge
eof
    
}

checks () {

    fail=0
    fail_report="$fails"

    num_assignments="$(cat "$run"/*."$assignments" | wc -l)"
    num_uniq_ass="$(cat "$run"/*."$assignments" | sort -u | wc -l)"

    if [ $num_assignments -eq $num_uniq_ass ]; then
        info "uniq test pass"
    else
        fail=$((fail+1))
    fi

    # matchtest1=$(mktemp)
    # matchtest2=$(mktemp)
    # cat "$participants"/*."$assignments" > $matchtest1
    # cat "$assigned" | sort -u > $matchtest2
    # diff $matchtest1 $matchtest2 || fail=$((fail + 1))

    cat "$all" | while read -r p; do
        num_times_assigned="$(cat "$run"/*."$assigned" | grep -F "$p" | wc -l)"

        fail=$((fail+1))
    done
    
    recMatchesAgg="$( grep -F "$line" < "$assigned" | wc -l)"
    recMatchesFiles="$( cat "$run"/*."$assigned" | grep -F "$line" | wc -l )"

    if [ $recMatchesAgg -ne 1 ] || [ $recMatchesFiles -ne 1 ]; then
        errortext "$line matches $recMatchesAgg or $recMatchesFiles"
        fail=$((fail+1))
    fi
    
    return $fail
}

match () {
   while [ $# -gt 0 ] ; do
       candidates_for "$1" | shuf | head -n 1 >> "$all/$1.match"
       num_matches="$( wc -l < $all.$1.match  )"
       
       if [ $num_matches -ne 1 ] ; then
           echo "$1 has $num_matches matches" >> "$fails"
           # return 1
       fi
       shift
   done

   return 0
}

make_matches () {

    cat "$all" | while read -r line; do
        p="$run/$line"

        shuf "$p.candidates" \
            | grep -vFf "$assigned" \
            | shuf \
            | head -n 1 \
            | tee -a "$assigned" >> "$p.assignments"
    done
}



run_tests () {

    testdata="$run/testdata"
    
    generate  \
    | setup_data
    setup_candidates || die
    make_matches || die
    
    checks
                  
}

candidates_for () {
    [ $# -eq 1 ] || die
    
    cat "$all" \
        | grep -vF "$1" \
        | grep -vFf "$1.$exclusions" \
        | grep -vFf <( cat "$run"/*."$assignments" )
}


# setup_candidates () {

#     touch "$assigned" || die

#     cat "$all" | while read -r part; do

#         cat "$all" \
    #             | grep -vF "$part" \
    #             | grep -vFf "$participants/$part.$exclusions" \
    #             | grep -vFf "$assigned" \
    #                    >> "$participants/$part.$candidates"
#     done
# }

setup_data () {
    #  get_participants > $participants

    mkdir $run || die

    while read -r linestring; do
        readarray line <<< "$linestring"
        line=($linestring)

        [ ${#line} -gt 0 ] && this_part="${line[0]}" && echo "$this_part" >> "$all"

        touch "$run/$this_part.assignments" "$run/$this_part.$exclusions" "$run/$this_part.$candidates"
        
        for item in "${line[@]}"; do
            if [[ $item =~ -(.*)$ ]]; then
                echo "${BASH_REMATCH[1]}" >> "$run/$this_part.$exclusions"
            elif [[ $item =~ =(.*)$ ]]; then
                echo "${BASH_REMATCH[1]}" >> "$run/$this_part.$assignments"
            else            
                [[ "$item" != "$this_part" ]] && warn "Incorrect specification for $this_part: not sure what to do with $item"
            fi
        done
    done
}

if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then

    [ -n "$arg_input_file" ] \
        && info "using input file $arg_input_file" \
        && "$0" < "$arg_input_file" \
        && exit $?
    
    [ -n "$arg_generate_file" ] \
        && "$0" -g > "$participants" \
        && exit $?

    [ -n "$arg_generate_stdout" ] \
        && generate \
        && exit $?

    [ -n "$arg_tests" ] && run_tests && exit $?

    cat - | setup_data || die

    make_matches || die

    for i in {1..100}; do
        if checks; then
            cd "$run"
            for d in *.assigned; do
                printf '%-15s: %s' "$d" $(cat "$d")
            done
            exit 0
        else
            thinbanner next run
            set_run_id
            make_matches || die
        fi
    done


else
    echo "Happy debugging!"
fi


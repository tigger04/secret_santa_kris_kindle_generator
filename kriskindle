#!/usr/bin/env bash

#shellcheck source=helper.sh
source ~/bin/helper.sh

set -e
unset arg_generate_stdout arg_generate_file arg_input_file

function usage {
	 cat <<eom
    Usage: $(basename "$0") [OPTION]...

    -g         generate example input
    -G         generate example input to file 
    -i <FILE>  location of input file [default: STDIN]
    -h         display help
eom

}

while getopts "Ggi:h" optKey; do
	 case "$optKey" in
        g)
            arg_generate_stdout=true
            ;;
		  G)
			   arg_generate_file=true
			   ;;
		  i)
            arg_input_file="$OPTARG"
			   ;;
        h)
            usage && exit 0
            ;;
        *)
            usage && exit 41
	         ;;
	 esac
done

shift $((OPTIND - 1))
# init switch flags
run_id="${EPOCHSECONDS}.$RANDOM$RANDOM"
participants="participants.$run_id"
exclusions="exclusions.$run_id"
fixes="fixes.$run_id"

generate () {

    cat - <<eof
Picard =Nerys
Riker -Picard
Kirk -Spock
Spock -Kirk
Sisko -Nerys -Worf -O\'Brien
Janeway -Chakotay -Kirk -Picard -Sisko
Chakotay -Janeway
T\'Pol
O\'Brien
Worf =Picard
eof
    
}

get_participants () {
    grep -Po '^[^ ]+'
}



checks () {
    warn checks not implemented yet
    return 0
}

get_matches () {
    cat -
    exit 0

    cat  "$participants"
}

if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
    checks || die

    [ -n "$arg_input_file" ] \
        && info "using input file $arg_input_file" \
        && "$0" < "$arg_input_file" \
        && exit $?
    
    [ -n "$arg_generate_file" ] \
        && "$0" -g > "$participants" \
        && exit $?

    [ -n "$arg_generate_stdout" ] \
        && generate \
        && exit $?

    get_matches

else
    echo "Happy debugging!"
fi

